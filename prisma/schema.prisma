generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model Biodata {
  id        String       @id @default(cuid())
  birthdate DateTime?
  gender    Gender?
  userId    String       @unique @db.Uuid
  User      public_users @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@schema("public")
}

model Whishlist {
  id        String       @id @db.Uuid
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String       @db.Uuid
  productId String
  Product   Product      @relation(fields: [productId], references: [id])
  User      public_users @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@schema("public")
}

model Address {
  id            String          @id @default(cuid())
  jalan         String?
  rt            String?
  rw            String?
  kodePos       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  districtId    Int
  provinceId    Int
  regencyId     Int
  villageId     BigInt
  kecamatan     District        @relation(fields: [districtId], references: [id])
  provinsi      Province        @relation(fields: [provinceId], references: [id])
  kota          Regency         @relation(fields: [regencyId], references: [id])
  kelurahan     Village         @relation(fields: [villageId], references: [id], onUpdate: NoAction)
  Order         Order[]
  Shipping      Shipping[]
  AddressToUser AddressToUser[]
  merchant      merchant[]

  @@schema("public")
}

model Province {
  id      Int       @id @default(autoincrement())
  name    String
  Address Address[]
  Regency Regency[]

  @@schema("public")
}

model Regency {
  id         Int        @id @default(autoincrement())
  name       String
  provinceId Int
  Address    Address[]
  District   District[]
  province   Province   @relation(fields: [provinceId], references: [id])

  @@schema("public")
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  regencyId Int
  Address   Address[]
  regency   Regency   @relation(fields: [regencyId], references: [id])
  Village   Village[]

  @@schema("public")
}

model Village {
  id         BigInt    @id
  name       String
  districtId Int
  Address    Address[]
  district   District  @relation(fields: [districtId], references: [id], onUpdate: NoAction)

  @@schema("public")
}

model Product {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  merchantId String
  imageUrls  String[]
  detail     String
  reviewId   String?
  category   Category
  Cart       Cart[]
  Order      Order[]
  merchant   merchant    @relation(fields: [merchantId], references: [id])
  rating     Reviews[]
  variant    Variant[]
  Whishlist  Whishlist[]

  @@schema("public")
}

model Variant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  name      String
  price     Int
  stock     Int
  Product   Product  @relation(fields: [productId], references: [id])

  @@schema("public")
}

model Reviews {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String       @db.Uuid
  productId String
  rating    Int
  comment   String
  Product   Product      @relation(fields: [productId], references: [id])
  User      public_users @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@schema("public")
}

model Cart {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String       @db.Uuid
  productId String
  quantity  Int
  price     Float
  Product   Product      @relation(fields: [productId], references: [id])
  User      public_users @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@schema("public")
}

model Order {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String       @db.Uuid
  productId String
  quantity  Int
  price     Float
  status    String
  addressId String?
  Address   Address?     @relation(fields: [addressId], references: [id])
  Product   Product      @relation(fields: [productId], references: [id])
  User      public_users @relation(fields: [userId], references: [id], onUpdate: NoAction)
  Shipping  Shipping[]

  @@schema("public")
}

model Shipping {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  orderId            String
  status             String
  courier            String
  resi               String
  cost               Float
  service            String
  etd                String
  destinationAddress String
  addressId          String
  originAddressId    String
  Order              Order    @relation(fields: [orderId], references: [id])
  originAddress      Address  @relation(fields: [originAddressId], references: [id])

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String

  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  id              String
  user_id         String     @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime?  @db.Timestamptz(6)
  created_at      DateTime?  @db.Timestamptz(6)
  updated_at      DateTime?  @db.Timestamptz(6)
  email           String?    @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           auth_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auth_users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]
  users                       public_users?

  @@index([instance_id])
  @@map("users")
  @@schema("auth")
}

model AddressToUser {
  A       String
  B       String  @db.Uuid
  Address Address @relation(fields: [A], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_AddressToUser_AB_unique")
  @@index([B], map: "_AddressToUser_B_index")
  @@map("_AddressToUser")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model merchant {
  id        String    @id(map: "Merchant_pkey")
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  addressId String
  earnings  Float
  logoUrl   String
  product   Product[]
  Address   Address   @relation(fields: [addressId], references: [id], onUpdate: NoAction)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model public_users {
  id        String      @id(map: "User_pkey") @db.Uuid
  email     String      @unique(map: "User_email_key") @db.VarChar
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)"))
  addressId String?
  ratingId  String?
  photoUrl  String?
  biodata   Biodata?
  Cart      Cart[]
  Order     Order[]
  Review    Reviews[]
  whishlist Whishlist[]
  users     auth_users  @relation(fields: [id], references: [id], onUpdate: NoAction)

  @@map("users")
  @@schema("public")
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN

  @@schema("public")
}

enum Category {
  LAPTOP
  SMARTPHONE
  HEADPHONE
  EARPHONE
  KEYBOARD
  MOUSE
  MONITOR
  SPEAKER
  PRINTER
  SCANNER
  PROJECTOR
  WEBCAM
  ROUTER
  MODEM
  ACCESSORIES
  STORAGE
  GAMING
  SOFTWARE
  NETWORKING
  SERVER
  COMPONENT
  CAMERA
  TV
  AUDIO
  VIDEO
  HOUSEHOLD
  KITCHEN
  FURNITURE
  FASHION
  BEAUTY
  HEALTH
  BABY
  TOYS
  SPORT
  AUTOMOTIVE
  BOOK
  MUSIC
  MOVIE
  GIFT
  FOOD
  DRINK
  TRAVEL
  TICKET
  SERVICE
  OTHER

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}
