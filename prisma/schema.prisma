generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  firstName String
  lastName  String
  phone     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  addressId String?
  ratingId  String?
  photoUrl  String?
  biodata   Biodata?
  Cart      Cart[]
  Order     Order[]
  Review    Reviews[]
  whishlist Whishlist[]
  address   Address[]   @relation("AddressToUser")
}

model Biodata {
  id        String    @id @default(cuid())
  birthdate DateTime?
  gender    Gender?
  userId    String    @unique
  User      User      @relation(fields: [userId], references: [id])
}

model Whishlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Address {
  id         String     @id @default(cuid())
  jalan      String?
  rt         String?
  rw         String?
  kodePos    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  districtId Int
  provinceId Int
  regencyId  Int
  villageId  BigInt
  kecamatan  District   @relation(fields: [districtId], references: [id])
  provinsi   Province   @relation(fields: [provinceId], references: [id])
  kota       Regency    @relation(fields: [regencyId], references: [id])
  kelurahan  Village    @relation(fields: [villageId], references: [id], onUpdate: NoAction)
  Merchant   Merchant[]
  Order      Order[]
  Shipping   Shipping[]
  User       User[]     @relation("AddressToUser")
}

model Province {
  id      Int       @id @default(autoincrement())
  name    String
  Address Address[]
  Regency Regency[]
}

model Regency {
  id         Int        @id @default(autoincrement())
  name       String
  provinceId Int
  Address    Address[]
  District   District[]
  province   Province   @relation(fields: [provinceId], references: [id])
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  regencyId Int
  Address   Address[]
  regency   Regency   @relation(fields: [regencyId], references: [id])
  Village   Village[]
}

model Village {
  id         BigInt    @id
  name       String
  districtId Int
  Address    Address[]
  district   District  @relation(fields: [districtId], references: [id], onUpdate: NoAction)
}

model Merchant {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addressId String
  earnings  Float
  logoUrl   String
  address   Address   @relation(fields: [addressId], references: [id])
  product   Product[]
}

model Product {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  merchantId String
  imageUrls  String[]
  detail     String
  reviewId   String?
  category   Category
  Cart       Cart[]
  Order      Order[]
  merchant   Merchant    @relation(fields: [merchantId], references: [id])
  rating     Reviews[]
  variant    Variant[]
  Whishlist  Whishlist[]
}

model Variant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  name      String
  price     Int
  stock     Int
  Product   Product  @relation(fields: [productId], references: [id])
}

model Reviews {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  rating    Int
  comment   String
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  quantity  Int
  price     Float
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  productId String
  quantity  Int
  price     Float
  status    String
  addressId String?
  Address   Address?   @relation(fields: [addressId], references: [id])
  Product   Product    @relation(fields: [productId], references: [id])
  User      User       @relation(fields: [userId], references: [id])
  Shipping  Shipping[]
}

model Shipping {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  orderId            String
  status             String
  courier            String
  resi               String
  cost               Float
  service            String
  etd                String
  destinationAddress String
  addressId          String
  originAddressId    String
  Order              Order    @relation(fields: [orderId], references: [id])
  originAddress      Address  @relation(fields: [originAddressId], references: [id])
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum Category {
  LAPTOP
  SMARTPHONE
  HEADPHONE
  EARPHONE
  KEYBOARD
  MOUSE
  MONITOR
  SPEAKER
  PRINTER
  SCANNER
  PROJECTOR
  WEBCAM
  ROUTER
  MODEM
  ACCESSORIES
  STORAGE
  GAMING
  SOFTWARE
  NETWORKING
  SERVER
  COMPONENT
  CAMERA
  TV
  AUDIO
  VIDEO
  HOUSEHOLD
  KITCHEN
  FURNITURE
  FASHION
  BEAUTY
  HEALTH
  BABY
  TOYS
  SPORT
  AUTOMOTIVE
  BOOK
  MUSIC
  MOVIE
  GIFT
  FOOD
  DRINK
  TRAVEL
  TICKET
  SERVICE
  OTHER
}
