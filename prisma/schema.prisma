generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id         String      @id @default(cuid())
  email      String      @unique
  firstName  String?
  lastName   String?
  phone      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  addressId  String?
  ratingId   String?
  avatar_url String?
  gender     Gender?
  birthDate  DateTime?   @db.Timestamptz(6)
  cart       cart[]
  merchant   merchant[]
  orders     orders[]
  reviews    reviews[]
  whishlist  whishlist[]
  address    address[]   @relation("AddressToUser")
}

model merchant {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addressId String
  earnings  Float
  logoUrl   String
  userId    String?
  address   address   @relation(fields: [addressId], references: [id])
  users     users?    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  product   product[]
}

model address {
  id                                         String     @id(map: "Address_pkey")
  jalan                                      String?
  rt                                         String?
  rw                                         String?
  kodePos                                    String
  createdAt                                  DateTime   @default(now())
  updatedAt                                  DateTime
  districtId                                 Int
  provinceId                                 Int
  regencyId                                  Int
  villageId                                  BigInt
  District                                   district   @relation(fields: [districtId], references: [id], onUpdate: NoAction)
  Province                                   province   @relation(fields: [provinceId], references: [id], onUpdate: NoAction)
  Regency                                    regencies  @relation(fields: [regencyId], references: [id], onUpdate: NoAction)
  village                                    village    @relation(fields: [villageId], references: [id], onUpdate: NoAction)
  Merchant                                   merchant[]
  orders                                     orders[]
  shipping_shipping_addressIdToaddress       shipping[] @relation("shipping_addressIdToaddress")
  shipping_shipping_originAddressIdToaddress shipping[] @relation("shipping_originAddressIdToaddress")
  User                                       users[]    @relation("AddressToUser")
}

model cart {
  id        String   @id(map: "Cart_pkey")
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  productId String
  quantity  Int
  price     Float
  product   product  @relation(fields: [productId], references: [id], onUpdate: NoAction)
  users     users    @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

model product {
  id         String      @id(map: "Product_pkey")
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  merchantId String
  imageUrls  String[]
  detail     String
  reviewId   String?
  category   Category
  cart       cart[]
  orders     orders[]
  merchant   merchant    @relation(fields: [merchantId], references: [id], onUpdate: NoAction)
  reviews    reviews[]
  variant    variant[]
  whishlist  whishlist[]
}

model shipping {
  id                                        String   @id(map: "Shipping_pkey")
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime
  orderId                                   String
  status                                    String
  courier                                   String
  resi                                      String
  cost                                      Float
  service                                   String
  etd                                       String
  addressId                                 String?
  originAddressId                           String
  address_shipping_addressIdToaddress       address? @relation("shipping_addressIdToaddress", fields: [addressId], references: [id], onUpdate: NoAction)
  Order                                     orders   @relation(fields: [orderId], references: [id], onUpdate: NoAction)
  address_shipping_originAddressIdToaddress address  @relation("shipping_originAddressIdToaddress", fields: [originAddressId], references: [id], onUpdate: NoAction)
}

model variant {
  id        String   @id(map: "Variant_pkey")
  createdAt DateTime @default(now())
  updatedAt DateTime
  productId String
  name      String
  price     Int
  stock     Int
  product   product  @relation(fields: [productId], references: [id], onUpdate: NoAction)
}

model village {
  id         BigInt    @id(map: "Village_pkey")
  name       String
  districtId Int
  address    address[]
  District   district  @relation(fields: [districtId], references: [id], onUpdate: NoAction)
}

model whishlist {
  id        String   @id(map: "Whishlist_pkey")
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  productId String
  product   product  @relation(fields: [productId], references: [id], onUpdate: NoAction)
  users     users    @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

model district {
  id        Int       @id(map: "District_pkey") @default(autoincrement())
  name      String
  regencyId Int
  address   address[]
  regencies regencies @relation(fields: [regencyId], references: [id], onUpdate: NoAction)
  village   village[]
}

model orders {
  id        String     @id(map: "Order_pkey")
  createdAt DateTime   @default(now())
  updatedAt DateTime
  userId    String
  productId String
  quantity  Int
  price     Float
  status    String
  addressId String?
  address   address?   @relation(fields: [addressId], references: [id], onUpdate: NoAction)
  product   product    @relation(fields: [productId], references: [id], onUpdate: NoAction)
  users     users      @relation(fields: [userId], references: [id], onUpdate: NoAction)
  shipping  shipping[]
}

model province {
  id        Int         @id(map: "Province_pkey") @default(autoincrement())
  name      String
  address   address[]
  regencies regencies[]
}

model regencies {
  id         Int        @id(map: "Regency_pkey") @default(autoincrement())
  name       String
  provinceId Int
  address    address[]
  district   district[]
  province   province   @relation(fields: [provinceId], references: [id], onUpdate: NoAction)
}

model reviews {
  id        String   @id(map: "Reviews_pkey")
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  productId String
  rating    Int
  comment   String
  product   product  @relation(fields: [productId], references: [id], onUpdate: NoAction)
  users     users    @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum Category {
  LAPTOP
  SMARTPHONE
  HEADPHONE
  EARPHONE
  KEYBOARD
  MOUSE
  MONITOR
  SPEAKER
  PRINTER
  SCANNER
  PROJECTOR
  WEBCAM
  ROUTER
  MODEM
  ACCESSORIES
  STORAGE
  GAMING
  SOFTWARE
  NETWORKING
  SERVER
  COMPONENT
  CAMERA
  TV
  AUDIO
  VIDEO
  HOUSEHOLD
  KITCHEN
  FURNITURE
  FASHION
  BEAUTY
  HEALTH
  BABY
  TOYS
  SPORT
  AUTOMOTIVE
  BOOK
  MUSIC
  MOVIE
  GIFT
  FOOD
  DRINK
  TRAVEL
  TICKET
  SERVICE
  OTHER
}
